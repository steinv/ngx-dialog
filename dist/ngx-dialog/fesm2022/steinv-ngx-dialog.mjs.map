{"version":3,"file":"steinv-ngx-dialog.mjs","sources":["../../../projects/ngx-dialog/src/lib/ngx-dialog.types.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog.controller.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog.service.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog-view.component.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog.module.ts","../../../projects/ngx-dialog/src/public-api.ts","../../../projects/ngx-dialog/src/steinv-ngx-dialog.ts"],"sourcesContent":["\r\nexport interface DialogResult<OUTPUT> {\r\n  result: DialogResolution;\r\n  data?: OUTPUT;\r\n}\r\n\r\nexport enum DialogResolution {\r\n  CONFIRM,\r\n  DISMISS,\r\n}\r\n","import {Observable, Subject} from 'rxjs';\r\nimport {DialogResolution, DialogResult} from './ngx-dialog.types';\r\nimport {OverlayRef} from '@angular/cdk/overlay';\r\n\r\n/**\r\n * Controller class that is injected with each Dialog component.\r\n * Use this controller to read input data and write output data from your dialog\r\n */\r\nexport class NgxDialogController<OUTPUT, INPUT = undefined> {\r\n  private afterClosedSubject = new Subject<DialogResult<OUTPUT>>();\r\n\r\n  constructor(private overlayRef: OverlayRef, public readonly input?: INPUT) {\r\n    this.input = input;\r\n  }\r\n\r\n  public dismiss(): void {\r\n    this.overlayRef.dispose();\r\n    this.afterClosedSubject.next({result: DialogResolution.DISMISS});\r\n    this.afterClosedSubject.complete();\r\n  }\r\n\r\n  public confirm(data?: OUTPUT) {\r\n    this.overlayRef.dispose();\r\n    this.afterClosedSubject.next({\r\n      result: DialogResolution.CONFIRM,\r\n      data\r\n    });\r\n    this.afterClosedSubject.complete();\r\n  }\r\n\r\n  /**\r\n   * An Observable that notifies when the overlay has closed\r\n   */\r\n  public afterClosed(): Observable<DialogResult<OUTPUT>> {\r\n    return this.afterClosedSubject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * An Observable that notifies when the backdrop was clicked\r\n   */\r\n  public backdropClick(): Observable<MouseEvent> {\r\n    return this.overlayRef.backdropClick();\r\n  }\r\n\r\n  \r\n  /**\r\n   * An Observable that notifies the keyboard down events\r\n   */\r\n   public keydownEvents(): Observable<KeyboardEvent> {\r\n    return this.overlayRef.keydownEvents();\r\n  }\r\n}\r\n","import { OverlayConfig } from '@angular/cdk/overlay';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { NgxDialogViewComponent } from './ngx-dialog-view.component';\r\nimport { NgxDialogController } from './ngx-dialog.controller';\r\n\r\n/**\r\n * Service used to open a new Dialog component\r\n */\r\n@Injectable()\r\n// @ts-ignore\r\nexport class NgxDialogService {\r\n  constructor(private overlay: Overlay, private injector: Injector) { }\r\n\r\n  // Overloading methods\r\n  open<OUTPUT, INPUT = undefined>(component: ComponentType<NgxDialogViewComponent<OUTPUT, INPUT>>): NgxDialogController<OUTPUT, INPUT>;\r\n  open<OUTPUT, INPUT = undefined>(component: ComponentType<NgxDialogViewComponent<OUTPUT, INPUT>>, inputData: INPUT): NgxDialogController<OUTPUT, INPUT>;\r\n  open<OUTPUT, INPUT = undefined>(component: ComponentType<NgxDialogViewComponent<OUTPUT, INPUT>>, config: OverlayConfig): NgxDialogController<OUTPUT, INPUT>;\r\n  open<OUTPUT, INPUT = undefined>(component: ComponentType<NgxDialogViewComponent<OUTPUT, INPUT>>, inputData: INPUT, config: OverlayConfig): NgxDialogController<OUTPUT, INPUT>;\r\n\r\n  /**\r\n   * Implementation to open a custom component in an overlay\r\n   */\r\n  open<OUTPUT, INPUT = undefined>(component: ComponentType<NgxDialogViewComponent<OUTPUT, INPUT>>, inputData?: INPUT, config?: OverlayConfig): NgxDialogController<OUTPUT, INPUT> {\r\n    if (!config) {\r\n      // Default config: globally centered position strategy\r\n      const positionStrategy = this.overlay\r\n        .position()\r\n        .global()\r\n        .centerHorizontally()\r\n        .centerVertically();\r\n\r\n      // Add css classes to the backdrop and dialog-panel\r\n      config = {\r\n        positionStrategy,\r\n        hasBackdrop: true,\r\n        backdropClass: 'ngx-dialog-backdrop',\r\n        panelClass: 'ngx-dialog-panel',\r\n      }\r\n    }\r\n\r\n    // Create the overlay with customizable options\r\n    const overlayRef = this.overlay.create(config);\r\n    \r\n    // Create injector to be able to reference the DialogController from within dialog components\r\n    const dialogController = new NgxDialogController<OUTPUT, INPUT>(overlayRef, inputData);\r\n    const injector = Injector.create({\r\n      parent: this.injector,\r\n      providers: [\r\n        { provide: NgxDialogController, useValue: dialogController },\r\n      ],\r\n    });\r\n\r\n    // Attach component portal to the overlay\r\n    const portal = new ComponentPortal(component, null, injector);\r\n    overlayRef.attach(portal);\r\n\r\n    // return the controller to the caller\r\n    return dialogController;\r\n  }\r\n}\r\n","import { NgxDialogController } from \"./ngx-dialog.controller\";\r\n\r\n/**\r\n * All dialog-components should implement this.\r\n *\r\n * Example:\r\n * export class MyDialogComponent implements NgxDialogViewComponent<MyOutputInterface, MyInputInterface> {\r\n *   public constructor(ngxDialogController: NgxDialogController<MyOutputInterface, MyInputInterface>) {}\r\n *\r\n *   public close(outputData: MyOutputInterface) {\r\n *     this.ngxDialogController.confirm(outputData);\r\n *   }\r\n * }\r\n */\r\nexport abstract class NgxDialogViewComponent<OUTPUT, INPUT = undefined> {\r\n  abstract get ngxDialogController(): NgxDialogController<OUTPUT, INPUT>;\r\n}\r\n","import { OverlayModule } from '@angular/cdk/overlay';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxDialogService } from './ngx-dialog.service';\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    OverlayModule,\r\n  ],\r\n  providers: [\r\n    NgxDialogService,\r\n  ],\r\n  exports: []\r\n})\r\nexport class NgxDialogModule { }\r\n","/*\r\n * Public API Surface of ngx-dialog\r\n */\r\nexport {NgxDialogService} from './lib/ngx-dialog.service';\r\nexport {NgxDialogViewComponent} from './lib/ngx-dialog-view.component';\r\nexport {NgxDialogController} from './lib/ngx-dialog.controller';\r\nexport {NgxDialogModule} from './lib/ngx-dialog.module';\r\nexport * from './lib/ngx-dialog.types';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}