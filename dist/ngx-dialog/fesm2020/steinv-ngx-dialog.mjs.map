{"version":3,"file":"steinv-ngx-dialog.mjs","sources":["../../../projects/ngx-dialog/src/lib/ngx-dialog.types.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog.controller.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog.service.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog-view.component.ts","../../../projects/ngx-dialog/src/lib/ngx-dialog.module.ts","../../../projects/ngx-dialog/src/public-api.ts","../../../projects/ngx-dialog/src/steinv-ngx-dialog.ts"],"sourcesContent":["\r\nexport interface DialogResult<O> {\r\n  result: DialogResolution;\r\n  data?: O;\r\n}\r\n\r\nexport enum DialogResolution {\r\n  CONFIRM,\r\n  DISMISS,\r\n}\r\n","import {Observable, Subject} from 'rxjs';\r\nimport {DialogResolution, DialogResult} from './ngx-dialog.types';\r\nimport {OverlayRef} from '@angular/cdk/overlay';\r\n\r\n/**\r\n * Controller class that is injected with each Dialog component.\r\n * Use this controller to read input data and write output data from your dialog\r\n */\r\nexport class NgxDialogController<O, I = undefined> {\r\n  private afterClosedSubject = new Subject<DialogResult<O>>();\r\n\r\n  constructor(private overlayRef: OverlayRef, public readonly input?: I) {\r\n    this.input = input;\r\n  }\r\n\r\n  public dismiss(): void {\r\n    this.overlayRef.dispose();\r\n    this.afterClosedSubject.next({result: DialogResolution.DISMISS})\r\n  }\r\n\r\n  public confirm(data?: O) {\r\n    this.overlayRef.dispose();\r\n    this.afterClosedSubject.next({\r\n      result: DialogResolution.CONFIRM,\r\n      data\r\n    });\r\n    this.afterClosedSubject.complete();\r\n  }\r\n\r\n  /**\r\n   * An Observable that notifies when the overlay has closed\r\n   */\r\n  public afterClosed(): Observable<DialogResult<O>> {\r\n    return this.afterClosedSubject.asObservable();\r\n  }\r\n}\r\n","import { OverlayConfig } from '@angular/cdk/overlay';\r\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { NgxDialogViewComponent } from './ngx-dialog-view.component';\r\nimport { NgxDialogController } from './ngx-dialog.controller';\r\n\r\n/**\r\n * Service used to open a new Dialog component\r\n */\r\n@Injectable()\r\n// @ts-ignore\r\nexport class NgxDialogService {\r\n  constructor(private overlay: Overlay, private injector: Injector) { }\r\n\r\n  // Overloading methods\r\n  open<O, I = undefined>(component: ComponentType<NgxDialogViewComponent<O, I>>): NgxDialogController<O, I>;\r\n  open<O, I = undefined>(component: ComponentType<NgxDialogViewComponent<O, I>>, inputData: I): NgxDialogController<O, I>;\r\n  open<O, I = undefined>(component: ComponentType<NgxDialogViewComponent<O, I>>, config: OverlayConfig): NgxDialogController<O, I>;\r\n  open<O, I = undefined>(component: ComponentType<NgxDialogViewComponent<O, I>>, inputData: I, config: OverlayConfig): NgxDialogController<O, I>;\r\n\r\n  /**\r\n   * Implementation to open a custom component in an overlay\r\n   */\r\n  open<O, I = undefined>(component: ComponentType<NgxDialogViewComponent<O, I>>, inputData?: I, config?: OverlayConfig): NgxDialogController<O, I> {\r\n    if (!config) {\r\n      // Default config: globally centered position strategy\r\n      const positionStrategy = this.overlay\r\n        .position()\r\n        .global()\r\n        .centerHorizontally()\r\n        .centerVertically();\r\n\r\n      // Add css classes to the backdrop and dialog-panel\r\n      config = {\r\n        positionStrategy,\r\n        hasBackdrop: true,\r\n        backdropClass: 'ngx-dialog-backdrop',\r\n        panelClass: 'ngx-dialog-panel',\r\n      }\r\n    }\r\n\r\n    // Create the overlay with customizable options\r\n    const overlayRef = this.overlay.create(config);\r\n\r\n    \r\n    // Create injector to be able to reference the DialogController from within dialog components\r\n    const dialogController = new NgxDialogController<O, I>(overlayRef, inputData);\r\n    const injector = Injector.create({\r\n      parent: this.injector,\r\n      providers: [\r\n        { provide: NgxDialogController, useValue: dialogController },\r\n      ],\r\n    });\r\n\r\n    // Attach component portal to the overlay\r\n    const portal = new ComponentPortal(component, null, injector);\r\n    overlayRef.attach(portal);\r\n\r\n    // return the controller to the caller\r\n    return dialogController;\r\n  }\r\n}\r\n","import { NgxDialogController } from \"./ngx-dialog.controller\";\r\n\r\n/**\r\n * All dialog-components should implement this.\r\n *\r\n * Example:\r\n * export class MyDialogComponent implements DialogComponent<MyOutputInterface, MyInputInterface> {\r\n *   public constructor(control: DialogController<MyOutputInterface, MyInputInterface>) {}\r\n *\r\n *   public close(outputData: MyOutputInterface) {\r\n *     this.control.confirm(outputData);\r\n *   }\r\n * }\r\n */\r\nexport abstract class NgxDialogViewComponent<O, I = undefined> {\r\n  abstract get control(): NgxDialogController<O, I>;\r\n}\r\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { NgModule } from '@angular/core';\nimport { NgxDialogService } from './ngx-dialog.service';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    OverlayModule,\n  ],\n  providers: [\n    NgxDialogService,\n  ],\n  exports: []\n})\nexport class NgxDialogModule { }\n","/*\n * Public API Surface of ngx-dialog\n */\nexport {NgxDialogService} from './lib/ngx-dialog.service';\nexport {NgxDialogViewComponent} from './lib/ngx-dialog-view.component';\nexport {NgxDialogController} from './lib/ngx-dialog.controller';\nexport {NgxDialogModule} from './lib/ngx-dialog.module';\nexport * from './lib/ngx-dialog.types';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;IAMY;AAAZ,WAAY,gBAAgB;IAC1B,6DAAO,CAAA;IACP,6DAAO,CAAA;AACT,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB;;ACF5B;;;;MAIa,mBAAmB;IAG9B,YAAoB,UAAsB,EAAkB,KAAS;QAAjD,eAAU,GAAV,UAAU,CAAY;QAAkB,UAAK,GAAL,KAAK,CAAI;QAF7D,uBAAkB,GAAG,IAAI,OAAO,EAAmB,CAAC;QAG1D,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;IAEM,OAAO;QACZ,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,gBAAgB,CAAC,OAAO,EAAC,CAAC,CAAA;KACjE;IAEM,OAAO,CAAC,IAAQ;QACrB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAC3B,MAAM,EAAE,gBAAgB,CAAC,OAAO;YAChC,IAAI;SACL,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;KACpC;;;;IAKM,WAAW;QAChB,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KAC/C;;;AC3BH;;;AAIA;MACa,gBAAgB;IAC3B,YAAoB,OAAgB,EAAU,QAAkB;QAA5C,YAAO,GAAP,OAAO,CAAS;QAAU,aAAQ,GAAR,QAAQ,CAAU;KAAK;;;;IAWrE,IAAI,CAAmB,SAAsD,EAAE,SAAa,EAAE,MAAsB;QAClH,IAAI,CAAC,MAAM,EAAE;;YAEX,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO;iBAClC,QAAQ,EAAE;iBACV,MAAM,EAAE;iBACR,kBAAkB,EAAE;iBACpB,gBAAgB,EAAE,CAAC;;YAGtB,MAAM,GAAG;gBACP,gBAAgB;gBAChB,WAAW,EAAE,IAAI;gBACjB,aAAa,EAAE,qBAAqB;gBACpC,UAAU,EAAE,kBAAkB;aAC/B,CAAA;SACF;;QAGD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;QAI/C,MAAM,gBAAgB,GAAG,IAAI,mBAAmB,CAAO,UAAU,EAAE,SAAS,CAAC,CAAC;QAC9E,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC/B,MAAM,EAAE,IAAI,CAAC,QAAQ;YACrB,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,gBAAgB,EAAE;aAC7D;SACF,CAAC,CAAC;;QAGH,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9D,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;QAG1B,OAAO,gBAAgB,CAAC;KACzB;;6GAjDU,gBAAgB;iHAAhB,gBAAgB;2FAAhB,gBAAgB;kBAF5B,UAAU;;;ACRX;;;;;;;;;;;;MAYsB,sBAAsB;;;MCC/B,eAAe;;4GAAf,eAAe;6GAAf,eAAe,YAPxB,aAAa;6GAOJ,eAAe,aALf;QACT,gBAAgB;KACjB,YALQ;YACP,aAAa;SACd;2FAMU,eAAe;kBAV3B,QAAQ;mBAAC;oBACR,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE;wBACP,aAAa;qBACd;oBACD,SAAS,EAAE;wBACT,gBAAgB;qBACjB;oBACD,OAAO,EAAE,EAAE;iBACZ;;;ACdD;;;;ACAA;;;;;;"}